// The file is generated by go-on-rails, a Rails generator gem:
// https://rubygems.org/gems/go-on-rails
// Or on Github: https://github.com/goonr/go-on-rails
// By B1nj0y <idegorepl@gmail.com>
package model

import (
	"errors"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/asaskevich/govalidator"
)

type Picture struct {
	Id            int64     `json:"id,omitempty" db:"id" valid:"-"`
	Name          string    `json:"name,omitempty" db:"name" valid:"-"`
	Url           string    `json:"url,omitempty" db:"url" valid:"-"`
	ImageableId   int64     `json:"imageable_id,omitempty" db:"imageable_id" valid:"-"`
	ImageableType string    `json:"imageable_type,omitempty" db:"imageable_type" valid:"-"`
	CreatedAt     time.Time `json:"created_at,omitempty" db:"created_at" valid:"-"`
	UpdatedAt     time.Time `json:"updated_at,omitempty" db:"updated_at" valid:"-"`
}

// FindPicture find a single picture by an id
func FindPicture(id int64) (*Picture, error) {
	if id == 0 {
		return nil, errors.New("Invalid id: it can't be zero")
	}
	var_picture := Picture{}
	err := db.Get(&var_picture, db.Rebind(`SELECT * FROM pictures WHERE id = ? LIMIT 1`), id)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_picture, nil
}

// FirstPicture find the first one picture by id ASC order
func FirstPicture() (*Picture, error) {
	var_picture := Picture{}
	err := db.Get(&var_picture, db.Rebind(`SELECT * FROM pictures ORDER BY id ASC LIMIT 1`))
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_picture, nil
}

// FirstPictures find the first N pictures by id ASC order
func FirstPictures(n uint32) ([]Picture, error) {
	var_pictures := []Picture{}
	sql := fmt.Sprintf("SELECT * FROM pictures ORDER BY id ASC LIMIT %v", n)
	err := db.Select(&var_pictures, db.Rebind(sql))
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_pictures, nil
}

// LastPicture find the last one picture by id DESC order
func LastPicture() (*Picture, error) {
	var_picture := Picture{}
	err := db.Get(&var_picture, db.Rebind(`SELECT * FROM pictures ORDER BY id DESC LIMIT 1`))
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_picture, nil
}

// LastPictures find the last N pictures by id DESC order
func LastPictures(n uint32) ([]Picture, error) {
	var_pictures := []Picture{}
	sql := fmt.Sprintf("SELECT * FROM pictures ORDER BY id DESC LIMIT %v", n)
	err := db.Select(&var_pictures, db.Rebind(sql))
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_pictures, nil
}

// FindPictures find one or more pictures by one or more ids
func FindPictures(ids ...int64) ([]Picture, error) {
	if len(ids) == 0 {
		msg := "At least one or more ids needed"
		log.Println(msg)
		return nil, errors.New(msg)
	}
	var_pictures := []Picture{}
	idsHolder := strings.Repeat(",?", len(ids)-1)
	sql := db.Rebind(fmt.Sprintf(`SELECT * FROM pictures WHERE id IN (?%s)`, idsHolder))
	idsT := []interface{}{}
	for _, id := range ids {
		idsT = append(idsT, interface{}(id))
	}
	err := db.Select(&var_pictures, sql, idsT...)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_pictures, nil
}

// FindPictureBy find a single picture by a field name and a value
func FindPictureBy(field string, val interface{}) (*Picture, error) {
	var_picture := Picture{}
	sqlFmt := `SELECT * FROM pictures WHERE %s = ? LIMIT 1`
	sqlStr := fmt.Sprintf(sqlFmt, field)
	err := db.Get(&var_picture, db.Rebind(sqlStr), val)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_picture, nil
}

// FindPicturesBy find all pictures by a field name and a value
func FindPicturesBy(field string, val interface{}) (var_pictures []Picture, err error) {
	sqlFmt := `SELECT * FROM pictures WHERE %s = ?`
	sqlStr := fmt.Sprintf(sqlFmt, field)
	err = db.Select(&var_pictures, db.Rebind(sqlStr), val)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_pictures, nil
}

// AllPictures get all the Picture records
func AllPictures() (pictures []Picture, err error) {
	err = db.Select(&pictures, "SELECT * FROM pictures")
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return pictures, nil
}

// PictureCount get the count of all the Picture records
func PictureCount() (c int64, err error) {
	err = db.Get(&c, "SELECT count(*) FROM pictures")
	if err != nil {
		log.Println(err)
		return 0, err
	}
	return c, nil
}

// PictureCountWhere get the count of all the Picture records with a where clause
func PictureCountWhere(where string, args ...interface{}) (c int64, err error) {
	sql := "SELECT count(*) FROM pictures"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return 0, err
	}
	err = stmt.Get(&c, args...)
	if err != nil {
		log.Println(err)
		return 0, err
	}
	return c, nil
}

// PictureIncludesWhere get the Picture associated models records, it's just the eager_load function
func PictureIncludesWhere(assocs []string, sql string, args ...interface{}) (var_pictures []Picture, err error) {
	var_pictures, err = FindPicturesWhere(sql, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	if len(assocs) == 0 {
		log.Println("No associated fields ard specified")
		return var_pictures, err
	}
	if len(var_pictures) <= 0 {
		return nil, errors.New("No results available")
	}
	ids := make([]interface{}, len(var_pictures))
	for _, v := range var_pictures {
		ids = append(ids, interface{}(v.Id))
	}
	return var_pictures, nil
}

// PictureIds get all the Ids of Picture records
func PictureIds() (ids []int64, err error) {
	err = db.Select(&ids, "SELECT id FROM pictures")
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ids, nil
}

// PictureIds get all the Ids of Picture records by where restriction
func PictureIdsWhere(where string, args ...interface{}) ([]int64, error) {
	ids, err := PictureIntCol("id", where, args...)
	return ids, err
}

// PictureIntCol get some int64 typed column of Picture by where restriction
func PictureIntCol(col, where string, args ...interface{}) (intColRecs []int64, err error) {
	sql := "SELECT " + col + " FROM pictures"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&intColRecs, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return intColRecs, nil
}

// PictureStrCol get some string typed column of Picture by where restriction
func PictureStrCol(col, where string, args ...interface{}) (strColRecs []string, err error) {
	sql := "SELECT " + col + " FROM pictures"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&strColRecs, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return strColRecs, nil
}

// FindPicturesWhere query use a partial SQL clause that usually following after WHERE
// with placeholders, eg: FindUsersWhere("first_name = ? AND age > ?", "John", 18)
// will return those records in the table "users" whose first_name is "John" and age elder than 18
func FindPicturesWhere(where string, args ...interface{}) (pictures []Picture, err error) {
	sql := "SELECT * FROM pictures"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&pictures, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return pictures, nil
}

// FindPicturesBySql query use a complete SQL clause
// with placeholders, eg: FindUsersBySql("SELECT * FROM users WHERE first_name = ? AND age > ?", "John", 18)
// will return those records in the table "users" whose first_name is "John" and age elder than 18
func FindPicturesBySql(sql string, args ...interface{}) (pictures []Picture, err error) {
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&pictures, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return pictures, nil
}

func CreatePicture(am map[string]interface{}) (int64, error) {
	if len(am) == 0 {
		return 0, fmt.Errorf("Zero key in the attributes map!")
	}
	t := time.Now()
	for _, v := range []string{"created_at", "updated_at"} {
		if am[v] == nil {
			am[v] = t
		}
	}
	keys := make([]string, len(am))
	i := 0
	for k := range am {
		keys[i] = k
		i++
	}
	sqlFmt := `INSERT INTO pictures (%s) VALUES (%s)`
	sqlStr := fmt.Sprintf(sqlFmt, strings.Join(keys, ","), ":"+strings.Join(keys, ",:"))
	result, err := db.NamedExec(sqlStr, am)
	if err != nil {
		log.Println(err)
		return 0, err
	}
	lastId, err := result.LastInsertId()
	if err != nil {
		log.Println(err)
		return 0, err
	}
	return lastId, nil
}

func (var_picture *Picture) Create() (int64, error) {
	ok, err := govalidator.ValidateStruct(var_picture)
	if !ok {
		errMsg := "Validate Picture struct error: Unknown error"
		if err != nil {
			errMsg = "Validate Picture struct error: " + err.Error()
		}
		log.Println(errMsg)
		return 0, errors.New(errMsg)
	}
	t := time.Now()
	var_picture.CreatedAt = t
	var_picture.UpdatedAt = t
	sql := `INSERT INTO pictures (name,url,imageable_id,imageable_type,created_at,updated_at) VALUES (:name,:url,:imageable_id,:imageable_type,:created_at,:updated_at)`
	result, err := db.NamedExec(sql, var_picture)
	if err != nil {
		log.Println(err)
		return 0, err
	}
	lastId, err := result.LastInsertId()
	if err != nil {
		log.Println(err)
		return 0, err
	}
	return lastId, nil
}

func (var_picture *Picture) CreateImageable(am map[string]interface{}) error {
	am["picture_id"] = var_picture.Id
	_, err := CreateImageable(am)
	return err
}

func (var_picture *Picture) Destroy() error {
	if var_picture.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := DestroyPicture(var_picture.Id)
	return err
}

func DestroyPicture(id int64) error {
	stmt, err := db.Preparex(db.Rebind(`DELETE FROM pictures WHERE id = ?`))
	_, err = stmt.Exec(id)
	if err != nil {
		return err
	}
	return nil
}

func DestroyPictures(ids ...int64) (int64, error) {
	if len(ids) == 0 {
		msg := "At least one or more ids needed"
		log.Println(msg)
		return 0, errors.New(msg)
	}
	idsHolder := strings.Repeat(",?", len(ids)-1)
	sql := fmt.Sprintf(`DELETE FROM pictures WHERE id IN (?%s)`, idsHolder)
	idsT := []interface{}{}
	for _, id := range ids {
		idsT = append(idsT, interface{}(id))
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(idsT...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	return cnt, nil
}

// DestroyPicturesWhere delete records by a where clause
// like: DestroyPicturesWhere("name = ?", "John")
// And this func will not call the association dependent action
func DestroyPicturesWhere(where string, args ...interface{}) (int64, error) {
	sql := `DELETE FROM pictures WHERE `
	if len(where) > 0 {
		sql = sql + where
	} else {
		return 0, errors.New("No WHERE conditions provided")
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(args...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	return cnt, nil
}

func (var_picture *Picture) Save() error {
	ok, err := govalidator.ValidateStruct(var_picture)
	if !ok {
		errMsg := "Validate Picture struct error: Unknown error"
		if err != nil {
			errMsg = "Validate Picture struct error: " + err.Error()
		}
		log.Println(errMsg)
		return errors.New(errMsg)
	}
	if var_picture.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	var_picture.UpdatedAt = time.Now()
	sqlFmt := `UPDATE pictures SET %s WHERE id = %v`
	sqlStr := fmt.Sprintf(sqlFmt, "name = :name, url = :url, imageable_id = :imageable_id, imageable_type = :imageable_type, updated_at = :updated_at", var_picture.Id)
	_, err = db.NamedExec(sqlStr, var_picture)
	return err
}

func UpdatePicture(id int64, am map[string]interface{}) error {
	if len(am) == 0 {
		return errors.New("Zero key in the attributes map!")
	}
	am["updated_at"] = time.Now()
	keys := make([]string, len(am))
	i := 0
	for k := range am {
		keys[i] = k
		i++
	}
	sqlFmt := `UPDATE pictures SET %s WHERE id = %v`
	setKeysArr := []string{}
	for _, v := range keys {
		s := fmt.Sprintf(" %s = :%s", v, v)
		setKeysArr = append(setKeysArr, s)
	}
	sqlStr := fmt.Sprintf(sqlFmt, strings.Join(setKeysArr, ", "), id)
	_, err := db.NamedExec(sqlStr, am)
	if err != nil {
		log.Println(err)
		return err
	}
	return nil
}

func (var_picture *Picture) Update(am map[string]interface{}) error {
	if var_picture.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := UpdatePicture(var_picture.Id, am)
	return err
}

func (var_picture *Picture) UpdateAttributes(am map[string]interface{}) error {
	if var_picture.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := UpdatePicture(var_picture.Id, am)
	return err
}

func (var_picture *Picture) UpdateColumns(am map[string]interface{}) error {
	if var_picture.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := UpdatePicture(var_picture.Id, am)
	return err
}

func UpdatePicturesBySql(sql string, args ...interface{}) (int64, error) {
	if sql == "" {
		return 0, errors.New("A blank SQL clause")
	}
	sql = strings.Replace(strings.ToLower(sql), "set", "set updated_at = ?, ", 1)
	args = append([]interface{}{time.Now()}, args...)
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(args...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	return cnt, nil
}
