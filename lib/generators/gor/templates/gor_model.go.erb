<%- param_name_plural = table_name = @model_name.underscore.pluralize -%>
<%- model_name_underscore = @model_name.underscore -%>
<%- col_names = @struct_info[:col_names] -%>
<%- has_assoc = !@struct_info[:assoc_info][:has_many].empty? || !@struct_info[:assoc_info][:has_one].empty? -%>
// The file is generated by go-on-rails, a Rails generator gem:
// https://rubygems.org/gems/go-on-rails
// Or on Github: https://github.com/goonr/go-on-rails
// By B1nj0y <idegorepl@gmail.com>
package model

import (
	"errors"
	"fmt"
	"log"
	"strings"
	<%- if @struct_info[:has_datetime_type] -%>
	"time"
    <%- end -%>
)

type <%= @model_name %> struct {
	<%= @struct_info[:struct_body] -%>
}

// Find<%= @model_name %> find a single <%= model_name_underscore %> by an id
func Find<%= @model_name %>(id int64) (*<%= @model_name %>, error) {
	if id == 0 {
		return nil, errors.New("Invalid id: it can't be zero")
	}
	var_<%= model_name_underscore %> := <%= @model_name %>{}
	err := db.Get(&var_<%= model_name_underscore %>, db.Rebind(`SELECT * FROM <%= table_name %> WHERE id = ? LIMIT 1`), id)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_<%= model_name_underscore %>, nil
}

// Find<%= @model_name.pluralize %> find one or more <%= model_name_underscore.pluralize %> by one or more ids
func Find<%= @model_name.pluralize %>(ids ...int64) ([]<%= @model_name %>, error) {
	if len(ids) == 0 {
		msg := "At least one or more ids needed"
		log.Println(msg)
		return nil, errors.New(msg)
	}
	var_<%= param_name_plural %> := []<%= @model_name %>{}
	idsHolder := strings.Repeat(",?", len(ids)-1)
	sql := db.Rebind(fmt.Sprintf(`SELECT * FROM <%= table_name %> WHERE id IN (?%s)`, idsHolder))
	idsT := []interface{}{}
	for _,id := range ids {
		idsT = append(idsT, interface{}(id))
	}
	err := db.Select(&var_<%= param_name_plural %>, sql, idsT...)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_<%= param_name_plural %>, nil
}

// Find<%= @model_name %>By find a single <%= model_name_underscore %> by a field name and a value
func Find<%= @model_name %>By(field string, val interface{}) (*<%= @model_name %>, error) {
	var_<%= model_name_underscore %> := <%= @model_name %>{}
	sqlFmt := `SELECT * FROM <%= table_name %> WHERE %s = ? LIMIT 1`
	sqlStr := fmt.Sprintf(sqlFmt, field)
	err := db.Get(&var_<%= model_name_underscore %>, db.Rebind(sqlStr), val)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return &var_<%= model_name_underscore %>, nil
}

// Find<%= @model_name.pluralize %>By find all <%= param_name_plural %> by a field name and a value
func Find<%= @model_name.pluralize %>By(field string, val interface{}) (var_<%= param_name_plural %> []<%= @model_name %>, err error) {
	sqlFmt := `SELECT * FROM <%= table_name %> WHERE %s = ?`
	sqlStr := fmt.Sprintf(sqlFmt, field)
	err = db.Select(&var_<%= param_name_plural %>, db.Rebind(sqlStr), val)
	if err != nil {
		log.Printf("Error: %v\n", err)
		return nil, err
	}
	return var_<%= param_name_plural %>, nil
}

// All<%= @model_name.pluralize %> get all the <%= @model_name %> records
func All<%= @model_name.pluralize %>() (<%= param_name_plural %> []<%= @model_name %>, err error) {
	err = db.Select(&<%= table_name %>, "SELECT * FROM <%= table_name %>")
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return <%= param_name_plural %>, nil
}

func <%= @model_name %>IncludesWhere(assocs []string, sql string, args ...interface{}) (var_<%= param_name_plural %> []<%= @model_name %>, err error) {
	var_<%= param_name_plural %>, err = Find<%= @model_name.pluralize %>Where(sql, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	if len(assocs) == 0 {
		log.Println("No associated fields ard specified")
		return var_<%= param_name_plural %>, err
	}
	if len(var_<%= param_name_plural %>) <= 0 {
		return nil, errors.New("No results available")
	}
	ids := make([]interface{}, len(var_<%= param_name_plural %>))
	for _, v := range var_<%= param_name_plural %> {
		ids = append(ids, interface{}(v.Id))
	}
	<%- if has_assoc -%>
	idsHolder := strings.Repeat(",?", len(ids)-1)
	for _, assoc := range assocs {
		switch assoc {
			<%- unless @struct_info[:assoc_info][:has_many].empty? -%>
				<%- has_many = @struct_info[:assoc_info][:has_many] -%>
				<%- has_many.each do |k, v| -%>
				case "<%= k.underscore.pluralize %>":
					<%- if v[:foreign_key] -%>
						where := fmt.Sprintf("<%= v[:foreign_key] %> IN (?%s)", idsHolder)
					<%- else -%>
						where := fmt.Sprintf("<%= model_name_underscore %>_id IN (?%s)", idsHolder)
					<%- end -%>
					var_<%= v[:class_name].underscore.pluralize %>, err := Find<%= v[:class_name].pluralize %>Where(where, ids...)
					if err != nil {
						log.Printf("Error when query associated objects: %v\n", assoc)
						continue
					}
					for _, vv := range var_<%= v[:class_name].underscore.pluralize %> {
						for i, vvv := range  var_<%= param_name_plural %> {
							<%- if v[:foreign_key] -%>
								if vv.<%= v[:foreign_key].camelize %> == vvv.Id {
									vvv.<%= k %> = append(vvv.<%= k %>, vv)
								}
							<%- else -%>
								if vv.<%= @model_name.camelize %>Id == vvv.Id {
									vvv.<%= k %> = append(vvv.<%= k %>, vv)
								}
							<%- end -%>
							var_<%= param_name_plural %>[i].<%= k %> = vvv.<%= k %>
						}
					}
				<%- end -%>
			<%- end -%>
			<%- unless @struct_info[:assoc_info][:has_one].empty? -%>
				<%- has_one = @struct_info[:assoc_info][:has_one] -%>
				<%- has_one.each do |k, v| -%>
				case "<%= k.underscore %>":
					<%- if v[:foreign_key] -%>
						where := fmt.Sprintf("<%= v[:foreign_key] %> IN (?%s)", idsHolder)
					<%- else -%>
						where := fmt.Sprintf("<%= model_name_underscore %>_id IN (?%s)", idsHolder)
					<%- end -%>
					var_<%= v[:class_name].underscore.pluralize %>, err := Find<%= v[:class_name].pluralize %>Where(where, ids...)
					if err != nil {
						log.Printf("Error when query associated objects: %v\n", assoc)
						continue
					}
					for _, vv := range var_<%= v[:class_name].underscore.pluralize %> {
						for i, vvv := range  var_<%= param_name_plural %> {
							<%- if v[:foreign_key] -%>
								if vv.<%= v[:foreign_key].camelize %> == vvv.Id {
									vvv.<%= k %> = vv
								}
							<%- else -%>
								if vv.<%= @model_name.camelize %>Id == vvv.Id {
									vvv.<%= k %> = vv
								}
							<%- end -%>
							var_<%= param_name_plural %>[i].<%= k %> = vvv.<%= k %>
						}
					}
				<%- end -%>
			<%- end -%>
		}
	}
	<%- end -%>
	return var_<%= param_name_plural %>, nil
}

// <%= @model_name %>Ids get all the Ids of <%= @model_name %> records
func <%= @model_name %>Ids() (ids []int64, err error) {
	err = db.Select(&ids, "SELECT id FROM <%= table_name %>")
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return ids, nil
}

// <%= @model_name %>Ids get all the Ids of <%= @model_name %> records by where restriction
func <%= @model_name %>IdsWhere(where string, args ...interface{}) ([]int64, error) {
	ids, err := <%= @model_name %>IntCol("id", where, args...)
	return ids, err
}

// <%= @model_name %>IntCol get some int64 typed column of <%= @model_name %> by where restriction
func <%= @model_name %>IntCol(col, where string, args ...interface{}) (intColRecs []int64, err error) {
	sql := "SELECT " + col + " FROM <%= table_name %>"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&intColRecs, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return intColRecs, nil
}

// <%= @model_name %>StrCol get some string typed column of <%= @model_name %> by where restriction
func <%= @model_name %>StrCol(col, where string, args ...interface{}) (strColRecs []string, err error) {
	sql := "SELECT " + col + " FROM <%= table_name %>"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&strColRecs, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return strColRecs, nil
}

// Find<%= @model_name.pluralize %>Where query use a partial SQL clause that usually following after WHERE
// with placeholders, eg: FindUsersWhere("first_name = ? AND age > ?", "John", 18)
// will return those records in the table "users" whose first_name is "John" and age elder than 18
func Find<%= @model_name.pluralize %>Where(where string, args ...interface{}) (<%= param_name_plural %> []<%= @model_name %>, err error) {
	sql := "SELECT * FROM <%= table_name %>"
	if len(where) > 0 {
		sql = sql + " WHERE " + where
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&<%= param_name_plural %>, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return <%= param_name_plural %>, nil
}

// Find<%= @model_name.pluralize %>BySql query use a complete SQL clause
// with placeholders, eg: FindUsersBySql("SELECT * FROM users WHERE first_name = ? AND age > ?", "John", 18)
// will return those records in the table "users" whose first_name is "John" and age elder than 18
func Find<%= @model_name.pluralize %>BySql(sql string, args ...interface{}) (<%= param_name_plural %> []<%= @model_name %>, err error) {
	stmt, err := db.Preparex(db.Rebind(sql))
	if err != nil {
		log.Println(err)
		return nil, err
	}
	err = stmt.Select(&<%= param_name_plural %>, args...)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return <%= param_name_plural %>, nil
}

func Create<%= @model_name %>(am map[string]interface{}) (int64, error) {
	if len(am) == 0 {
		return 0, fmt.Errorf("Zero key in the attributes map!")
	}
<%- unless @struct_info[:timestamp_cols].empty? -%>
	t := time.Now()
	for _, v := range []string{<%= @struct_info[:timestamp_cols].map(&:inspect).join(", ") %>} {
		if am[v] == nil {
			am[v] = t
		}
	}
<%- end -%>
	keys := make([]string, len(am))
	i := 0
	for k := range am {
		keys[i] = k
		i++
	}
	sqlFmt := `INSERT INTO <%= table_name %> (%s) VALUES (%s)`
	sqlStr := fmt.Sprintf(sqlFmt, strings.Join(keys, ","), ":"+strings.Join(keys, ",:"))
	result, err := db.NamedExec(sqlStr, am)
	if err != nil {
		log.Println(err)
		return 0, err
	}
	lastId, err := result.LastInsertId()
	if err != nil {
		log.Println(err)
		return 0, err
	}
	return lastId, nil
}

func (var_<%= model_name_underscore %> *<%= @model_name %>) Create() error {
<%- unless @struct_info[:timestamp_cols].empty? -%>
	t := time.Now()
	<%- @struct_info[:timestamp_cols].each do |c| -%>
	var_<%= model_name_underscore %>.<%= c.camelize %> = t
    <%- end -%>
<%- end -%>
    sql := `INSERT INTO <%= table_name %> (<%= col_names.join(",") %>) VALUES (:<%= col_names.join(",:") %>)`
    _, err := db.NamedExec(sql, var_<%= model_name_underscore %>)
    return err
}

<%- unless @struct_info[:assoc_info][:has_many].empty? -%>
	<%- has_many = @struct_info[:assoc_info][:has_many] -%>
	<%- has_many.each do |k, v| -%>
func (var_<%= model_name_underscore %> *<%= @model_name %>) <%= v[:class_name].pluralize %>Create(am map[string]interface{}) error {
	<%- if v[:through] -%>
		// FIXME: use transaction to create these associated objects
		<%= v[:class_name].underscore %>_id, err := Create<%= v[:class_name] %>(am)
		if err != nil {
			return err
		}
		_, err = Create<%= v[:through].to_s.singularize.camelize %>(map[string]interface{}{"<%= model_name_underscore %>_id": var_<%= model_name_underscore %>.Id, "<%= v[:class_name].underscore %>_id": <%= v[:class_name].underscore %>_id})
	<%- else -%>
		<%- if v[:foreign_key] -%>
			am["<%= v[:foreign_key] %>"] = var_<%= model_name_underscore %>.Id
		<%- else -%>
			am["<%= model_name_underscore %>_id"] = var_<%= model_name_underscore %>.Id
		<%- end -%>
		_, err := Create<%= v[:class_name] %>(am)
	<%- end -%>
	return err
}

func (var_<%= model_name_underscore %> *<%= @model_name %>) Get<%= v[:class_name].pluralize %>() error {
	<%- if v[:through] -%>
		// FIXME: use transaction to create these associated objects
		<%= v[:class_name].underscore %>_ids, err := <%= v[:through].to_s.singularize.camelize %>IntCol("<%= v[:class_name].underscore %>_id", "<%= model_name_underscore %>_id = ?", var_<%= model_name_underscore %>.Id)
		if err != nil {
			return err
		}
		var_<%= v[:class_name].underscore.pluralize %>, err := Find<%= v[:class_name].pluralize %>(<%= v[:class_name].underscore %>_ids...)
	<%- else -%>
		<%- if v[:foreign_key] -%>
			var_<%= v[:class_name].underscore.pluralize %>, err := Find<%= v[:class_name].pluralize %>By("<%= v[:foreign_key] %>", var_<%= model_name_underscore %>.Id)
		<%- else -%>
			var_<%= v[:class_name].underscore.pluralize %>, err := Find<%= v[:class_name].pluralize %>By("<%= model_name_underscore %>_id", var_<%= model_name_underscore %>.Id)
		<%- end -%>
	<%- end -%>
	if err == nil {
		var_<%= model_name_underscore %>.<%= k %> = var_<%= v[:class_name].underscore.pluralize %>
    }
    return err
}
	<%- end -%>
<%- end -%>

<%- unless @struct_info[:assoc_info][:has_one].empty? -%>
	<%- has_one = @struct_info[:assoc_info][:has_one] -%>
	<%- has_one.each do |k, v| -%>
func (var_<%= model_name_underscore %> *<%= @model_name %>) Create<%= v[:class_name] %>(am map[string]interface{}) error {
	<%- if v[:foreign_key] -%>
	am["<%= v[:foreign_key] %>"] = var_<%= model_name_underscore %>.Id
    <%- else -%>
	am["<%= model_name_underscore %>_id"] = var_<%= model_name_underscore %>.Id
	<%- end -%>
	_, err := Create<%= v[:class_name] %>(am)
	return err
}
	<%- end -%>
<%- end -%>

<%- unless @struct_info[:assoc_info][:belongs_to].empty? -%>
	<%- belongs_to = @struct_info[:assoc_info][:belongs_to] -%>
	<%- belongs_to.each do |k, v| -%>
func (var_<%= model_name_underscore %> *<%= @model_name %>) Create<%= v[:class_name] %>(am map[string]interface{}) error {
	<%- if v[:foreign_key] -%>
	am["<%= v[:foreign_key] %>"] = var_<%= model_name_underscore %>.Id
    <%- else -%>
	am["<%= model_name_underscore %>_id"] = var_<%= model_name_underscore %>.Id
	<%- end -%>
	_, err := Create<%= v[:class_name] %>(am)
	return err
}
	<%- end -%>
<%- end -%>

func (var_<%= model_name_underscore %> *<%= @model_name %>) Destroy() error {
	if var_<%= model_name_underscore %>.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := Destroy<%= @model_name %>(var_<%= model_name_underscore %>.Id)
	return err
}

func Destroy<%= @model_name %>(id int64) error {
	stmt, err := db.Preparex(db.Rebind(`DELETE FROM <%= table_name %> WHERE id = ?`))
	_, err = stmt.Exec(id)
	if err != nil {
		return err
	}
	<%- if has_assoc -%>
	// not care if exec properly temporarily
	destroy<%= @model_name %>Associations(id)
    <%- end -%>
	return nil
}

func Destroy<%= @model_name.pluralize %>(ids ...int64) (int64, error) {
	if len(ids) == 0 {
		msg := "At least one or more ids needed"
		log.Println(msg)
		return 0, errors.New(msg)
	}
	idsHolder := strings.Repeat(",?", len(ids)-1)
	sql := fmt.Sprintf(`DELETE FROM <%= table_name %> WHERE id IN (?%s)`, idsHolder)
	idsT := []interface{}{}
	for _,id := range ids {
		idsT = append(idsT, interface{}(id))
	}
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(idsT...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	<%- if has_assoc -%>
	// not care if exec properly temporarily
	destroy<%= @model_name %>Associations(ids...)
	<%- end -%>
	return cnt, nil
}

// Destroy<%= @model_name.pluralize %>Where delete records by a where clause
// like: Destroy<%= @model_name.pluralize %>Where("name = ?", "John")
// And this func will not call the association dependent action
func Destroy<%= @model_name.pluralize %>Where(where string, args ...interface{}) (int64, error) {
	sql := `DELETE FROM <%= table_name %> WHERE `
	if len(where) > 0 {
		sql = sql + where
	} else {
		return 0, errors.New("No WHERE conditions provided")
	}
	<%- if has_assoc -%>
	ids, x_err := <%= @model_name %>IdsWhere(where, args...)
	<%- end -%>
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(args...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	<%- if has_assoc -%>
	if x_err != nil {
		log.Printf("Delete associated objects error: %v\n", err)
	} else {
		destroy<%= @model_name %>Associations(ids...)
	}
	<%- end -%>
	return cnt, nil
}

<%- if has_assoc -%>
// the func not return err temporarily
func destroy<%= @model_name %>Associations(ids ...int64) {
	idsHolder := ""
	if len(ids) > 1 {
		idsHolder = strings.Repeat(",?", len(ids)-1)
	}
	idsT := []interface{}{}
	for _, id := range ids {
		idsT = append(idsT, interface{}(id))
	}
	var err error
	// make sure no declared-and-not-used exception
	_, _, _ = idsHolder, idsT, err
	<%- [:has_many, :has_one].each do |ass| -%>
		<%- ass_cols = @struct_info[:assoc_info][ass] -%>
		<%- unless ass_cols.empty? -%>
			<%- ass_cols.each_value do |opts| -%>
				<%- if opts.key? :dependent -%>
					<%- case opts[:dependent] -%>
					<%- when :destroy, :delete_all -%>
						<%- if opts[:through] -%>
							sql := fmt.Sprintf("id IN (SELECT id FROM <%= opts[:through].to_s %> WHERE <%= model_name_underscore %>_id IN (?%s))", idsHolder)
							_, err = Destroy<%= opts[:class_name].pluralize %>Where(sql, idsT...)
							if err != nil {
								log.Printf("Destroy associated object %s error: %v\n", "<%= opts[:class_name].pluralize %>", err)
							}
							sql = fmt.Sprintf("<%= model_name_underscore %>_id IN (?%s)", idsHolder)
							_, err = Destroy<%= opts[:through].to_s.pluralize.camelize %>Where(sql, idsT...)
							if err != nil {
								log.Printf("Destroy associated object %s error: %v\n", "<%= opts[:through].to_s.singularize.camelize %>", err)
							}
						<%- else -%>
							<%- if opts.key? :foreign_key -%>
								sql := fmt.Sprintf("<%= opts[:foreign_key] %> IN (?%s)", idsHolder)
							<%- else -%>
								sql := fmt.Sprintf("<%= model_name_underscore %>_id IN (?%s)", idsHolder)
							<%- end -%>
							_, err = Destroy<%= opts[:class_name].pluralize %>Where(sql, idsT...)
							if err != nil {
								log.Printf("Destroy associated object %s error: %v\n", "<%= opts[:class_name].pluralize %>", err)
							}
						<%- end -%>
					<%- when :nullify -%>
						// no sql.NULLType supported, just set the associated field to zero value of int64
						<%- if opts[:through] -%>
							sql := fmt.Sprintf("UPDATE <%= opts[:through].to_s %> SET <%= opts[:class_name].underscore %>_id = 0 WHERE <%= opts[:class_name].underscore %>_id IN (?%s)", idsHolder)
							_, err = Update<%= opts[:through].to_s.camelize %>BySql(sql, idsT...)
							if err != nil {
								log.Printf("Delete associated object %s error: %v\n", "<%= opts[:class_name].pluralize %>", err)
							}
						<%- else -%>
							<%- if opts.key? :foreign_key -%>
								sql := fmt.Sprintf("UPDATE <%= opts[:class_name].underscore.pluralize %> SET <%= opts[:foreign_key] %> = 0 WHERE <%= opts[:foreign_key] %> IN (?%s)", idsHolder)
							<%- else -%>
								sql := fmt.Sprintf("UPDATE <%= opts[:class_name].underscore.pluralize %> SET <%= model_name_underscore %>_id = 0 WHERE <%= model_name_underscore %>_id IN (?%s)", idsHolder)
							<%- end -%>
							_, err = Update<%= opts[:class_name].pluralize %>BySql(sql, idsT...)
							if err != nil {
								log.Printf("Delete associated object %s error: %v\n", "<%= opts[:class_name].pluralize %>", err)
							}
						<%- end -%>
					<%- end -%>
				<%- end -%>
			<%- end -%>
		<%- end -%>
	<%- end -%>
}
<%- end -%>

func (var_<%= model_name_underscore %> *<%= @model_name %>) Save() error {
	if var_<%= model_name_underscore %>.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
<%- if @struct_info[:timestamp_cols].include? "updated_at" -%>
	var_<%= model_name_underscore %>.UpdatedAt = time.Now()
<%- end -%>
	sqlFmt := `UPDATE <%= table_name %> SET %s WHERE id = %v`
	<%- save_col_names = col_names - ["created_at"] -%>
	sqlStr := fmt.Sprintf(sqlFmt, "<%= save_col_names.zip(save_col_names).map{|c| c.join(" = :")}.join(", ") %>", var_<%= model_name_underscore %>.Id)
    _, err := db.NamedExec(sqlStr, var_<%= model_name_underscore %>)
    return err
}

func Update<%= @model_name %>(id int64, am map[string]interface{}) error {
	if len(am) == 0 {
		return errors.New("Zero key in the attributes map!")
	}
<%- if @struct_info[:timestamp_cols].include? "updated_at" -%>
	am["updated_at"] = time.Now()
<%- end -%>
	keys := make([]string, len(am))
	i := 0
	for k := range am {
		keys[i] = k
		i++
	}
	sqlFmt := `UPDATE <%= table_name %> SET %s WHERE id = %v`
	setKeysArr := []string{}
	for _,v := range keys {
		s := fmt.Sprintf(" %s = :%s", v, v)
		setKeysArr = append(setKeysArr, s)
	}
	sqlStr := fmt.Sprintf(sqlFmt, strings.Join(setKeysArr, ", "), id)
	_, err := db.NamedExec(sqlStr, am)
	if err != nil {
		log.Println(err)
		return err
	}
	return nil
}

func (var_<%= model_name_underscore %> *<%= @model_name %>) Update(am map[string]interface{}) error {
	if var_<%= model_name_underscore %>.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := Update<%= @model_name %>(var_<%= model_name_underscore %>.Id, am)
	return err
}

func (var_<%= model_name_underscore %> *<%= @model_name %>) UpdateAttributes(am map[string]interface{}) error {
	if var_<%= model_name_underscore %>.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := Update<%= @model_name %>(var_<%= model_name_underscore %>.Id, am)
	return err
}

func (var_<%= model_name_underscore %> *<%= @model_name %>) UpdateColumns(am map[string]interface{}) error {
	if var_<%= model_name_underscore %>.Id == 0 {
		return errors.New("Invalid Id field: it can't be a zero value")
	}
	err := Update<%= @model_name %>(var_<%= model_name_underscore %>.Id, am)
	return err
}

func Update<%= @model_name.pluralize %>BySql(sql string, args ...interface{}) (int64, error) {
	if sql == "" {
		return 0, errors.New("A blank SQL clause")
	}
<%- if @struct_info[:timestamp_cols].include? "updated_at" -%>
	sql = strings.Replace(strings.ToLower(sql), "set", "set updated_at = ?, ", 1)
	args = append([]interface{}{time.Now()}, args...)
<%- end -%>
	stmt, err := db.Preparex(db.Rebind(sql))
	result, err := stmt.Exec(args...)
	if err != nil {
		return 0, err
	}
	cnt, err := result.RowsAffected()
	if err != nil {
		return 0, err
	}
	return cnt, nil
}
